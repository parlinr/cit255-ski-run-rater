Add this to switch statement in Controller.cs:
case AppEnum.ManagerAction.QuerySkiRunsByVertical:
                            int[] minMaxValues = ConsoleView.DisplayGetSkiRunQuery();
                            List<SkiRun> results = skiRunRepository.QueryByVertical(minMaxValues[0], minMaxValues[1]);
                            ConsoleView.DisplayQueryResults(results);
                            ConsoleView.DisplayContinuePrompt();
                            break;

Add this to ConsoleView:
/// <summary>
        /// This method displays the query results
        /// </summary>
        /// <param name="skiRuns"></param>
public static void DisplayQueryResults(List<SkiRun> skiRuns)
        {
            DisplayReset();

            DisplayMessage("The ski runs that satisfy your criteria are listed below:");
            DisplayMessage("");

            StringBuilder columnHeader = new StringBuilder();

            columnHeader.Append("ID".PadRight(8));
            columnHeader.Append("Ski Run".PadRight(25));
            columnHeader.Append("Vertical in Feet".PadRight(5));

            DisplayMessage(columnHeader.ToString());

            foreach (SkiRun skiRun in skiRuns)
            {
                StringBuilder skiRunInfo = new StringBuilder();

                skiRunInfo.Append(skiRun.ID.ToString().PadRight(8));
                skiRunInfo.Append(skiRun.Name.PadRight(25));
                skiRunInfo.Append(skiRun.Vertical.ToString().PadRight(5));

                DisplayMessage(skiRunInfo.ToString());
            }
        }

Also add this to ConsoleView:
/// <summary>
        /// This method gets the lower and upper bounds of the query from the user
        /// </summary>
        public static int[] DisplayGetSkiRunQuery()
        {
            DisplayReset();
            int[] values = new int[2];
            DisplayMessage("Ski Run Query");
            DisplayMessage("");
            values[0] = GetIntegerFromUser("Enter the minimum vertical value (in feet): ");
            values[1] = GetIntegerFromUser("Enter the maximum vertical value (in feet): ");
            return values;
           
            
        }

This is how I modified the stock QueryByVertical method in the SkiRunRepository class:
 /// <summary>
        /// method to query the data by the vertical of each ski run in feet
        /// </summary>
        /// <param name="minimumVertical">int minimum vertical</param>
        /// <param name="maximumVertical">int maximum vertical</param>
        /// <returns></returns>
        public List<SkiRun> QueryByVertical(int minimumVertical, int maximumVertical)
        {
            List<SkiRun> skiRuns = ReadSkiRunsData(DataSettings.dataFilePath);
            List<SkiRun> matchingSkiRuns = new List<SkiRun>();
            foreach (SkiRun run in skiRuns)
            {
                if (run.Vertical >= minimumVertical && run.Vertical <=maximumVertical)
                {
                    matchingSkiRuns.Add(run);
                }
            }
            

            return matchingSkiRuns;
        }        